#!/usr/bin/env python

# 
# DUMMY ODOM
#	Author: Muhammad Irsyad Sahalan
#	Date : 16/02/2022
#	Descripton : dummy odometry NOTE: THIS VERSION IS FOR +VE FORWARD MOTION ONLY
# 	license :
# 

import rospy
import tf_conversions
import tf2_ros
from geometry_msgs.msg import Twist, TransformStamped
from nav_msgs.msg import Odometry
import time
from math import acos, sin, cos, sqrt, pi

second = 0
second_prev = 0


def cmdAutoCallback(data):
    global second
    global second_prev
    odom_ = Odometry()
    second = rospy.get_time()
    angle = float
    angle = -0.0

    #debug
    print("before")
    print("qx: %.2f" %(odom.pose.pose.orientation.x))
    print("qy: %.2f" %(odom.pose.pose.orientation.y))
    print("qz: %.2f" %(odom.pose.pose.orientation.z))
    print("qw: %.2f" %(odom.pose.pose.orientation.w))

    #prev orientation (quarternion to angle)
    if odom.pose.pose.orientation.w > 0.9999 and odom.pose.pose.orientation.w < 1.0001:
        x = 0
        y = 0
        z = -1
        print("qw == 1")
    else:    
        denom = sqrt(1-pow(odom.pose.pose.orientation.w,2))
        #x = (odom.pose.pose.orientation.x/denom)
        #y = (odom.pose.pose.orientation.y/denom)
        x = 0
        y = 0
        z = (odom.pose.pose.orientation.z/denom)
        
        #    angle = (-2*pi + angle)
        #elif angle < -1*pi:
        #    angle = (2*pi + angle)

    angle = 2*acos(odom.pose.pose.orientation.w)

    if angle > pi:
             print("before: angle > pi")
    elif angle < -1*pi:
             print("before: angle < -pi")

    print("rad: %.4f" %(angle))
    print("x: %.2f" %(x))
    print("y: %.2f" %(y))
    print("z: %.2f" %(z))

    #convert vector
    #x_vec = x*angle
    #y_vec = y*angle
    #z_vec = z*angle

    #add operation #####################
    second_period = second-second_prev
    #angular.x & y assumed = 0
    val = data.angular.z*second_period
    
    angle_new = angle + val
    print("angle_new: %.4f" %(angle_new))
    
    if angle_new < 0:
        rem_ = angle_new%(2*pi) #get remainder
        angle_new = 2*pi + rem_
    if angle_new > 2*pi:
        rem_ = angle_new%(2*pi) #get remainder
        angle_new = rem_

    #normalize
    z_new = 1
    #if not val < 0:
    #    z_new = 1
        #print("z_new: %.2f" %(z_new))
    #else:
    #    z_new = -1

    #angle_new = abs(angle_new)


    #print("add rad: %.4f" %(val))
    print("add rad: %.4f at z: %.1f" %(val,z_new))
    #z = z + z_
    #z = z_
    #angle = angle + rad_


    print("rad_new: %.4f" %(angle_new))
    #calculate turn (quarternion)
    sin_angle = sin(angle_new/2)
    #odom.pose.pose.orientation.x = odom.pose.pose.orientation.x + 0
    #odom.pose.pose.orientation.y = odom.pose.pose.orientation.y + 0
    #odom.pose.pose.orientation.z = odom.pose.pose.orientation.z + sin_angle
    #odom.pose.pose.orientation.x = x_new*sin_angle
    #odom.pose.pose.orientation.y = y_new*sin_angle
    odom.pose.pose.orientation.x = 0
    odom.pose.pose.orientation.y = 0
    odom.pose.pose.orientation.z = z_new*sin_angle
    odom.pose.pose.orientation.w = cos(angle_new/2)
    #calculate motion at x-axis & y-axis
    #odom.pose.pose.position.x = odom.pose.pose.position.x + data.linear.x*(second_period)
    odom.pose.pose.position.x = odom.pose.pose.position.x + data.linear.x*cos(angle_new)
    odom.pose.pose.position.y = odom.pose.pose.position.y + data.linear.x*sin(angle_new)

       #debug
    print("after")
    print("qx: %.2f" %(odom.pose.pose.orientation.x))
    print("qy: %.2f" %(odom.pose.pose.orientation.y))
    print("qz: %.2f" %(odom.pose.pose.orientation.z))
    print("qw: %.2f" %(odom.pose.pose.orientation.w))
    print("")
    second_prev = second

    
    
    
def operation():
    rate = rospy.Rate(30)
    while not rospy.is_shutdown():
        odom.header.seq = odom.header.seq + 1
        odom.header.stamp = rospy.Time.now()
        odom_pub.publish(odom)

        #tran.header.stamp = rospy.Time.now()
        tran.header.frame_id = "base_link"
        tran.child_frame_id = "odom"
        tran.transform.translation.x = odom.pose.pose.position.x
        tran.transform.translation.y = odom.pose.pose.position.y
        tran.transform.translation.z = odom.pose.pose.position.z
        tran.transform.rotation.x = odom.pose.pose.orientation.x
        tran.transform.rotation.y = odom.pose.pose.orientation.y
        tran.transform.rotation.z = odom.pose.pose.orientation.z
        tran.transform.rotation.w = odom.pose.pose.orientation.w
        br.sendTransform(tran)

        #print(odom)
        #print("seq: %d" %(odom.header.seq))
        #print("stamp: %s" %(str(odom.header.stamp)))
        #print("position.x: %.2f" %(odom.pose.pose.position.x))
        #print("position.y: %.2f" %(odom.pose.pose.position.y))
        #print("position.z: %.2f" %(odom.pose.pose.position.z))
        #print("orientation.x: %.2f" %(odom.pose.pose.orientation.x))
        #print("orientation.y: %.2f" %(odom.pose.pose.orientation.y))
        #print("orientation.z: %.2f" %(odom.pose.pose.orientation.z))
        #print("orientation.w: %.2f" %(odom.pose.pose.orientation.w))
        rate.sleep()

if __name__=="__main__":

    rospy.init_node('dummy_odom')

    odom = Odometry()
    odom.header.seq = 0
    odom.header.stamp = rospy.get_time()	#second
    odom.header.frame_id = "base_link"
    odom.child_frame_id = "odom"
    odom.pose.pose.position.x = 0
    odom.pose.pose.position.y = 0
    odom.pose.pose.position.z = 0

    odom.pose.pose.orientation.x = 0   #how to calculate
    odom.pose.pose.orientation.y = 0
    odom.pose.pose.orientation.z = 0
    odom.pose.pose.orientation.w = 1

    odom.twist.twist.linear.x = 0
    odom.twist.twist.linear.y = 0
    odom.twist.twist.linear.z = 0
    odom.twist.twist.angular.x = 0
    odom.twist.twist.angular.y = 0
    odom.twist.twist.angular.z = 0
    
    second = rospy.get_time()
    second_prev = second

    rospy.Subscriber("cmd_vel", Twist, cmdAutoCallback)
    odom_pub = rospy.Publisher('odom', Odometry, queue_size=5)
    br = tf2_ros.TransformBroadcaster()
    tran = TransformStamped()
    
    try:
        while not rospy.is_shutdown():
            operation()
    except rospy.ROSInterruptException:
        pass
